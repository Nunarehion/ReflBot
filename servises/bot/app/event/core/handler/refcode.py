from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from app.database.service import DatabaseService
from app.fsm.registration import RegistrationStates
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

router = Router()

@router.message(Command("refcode"))
async def add_referral_code_later(message: types.Message, state: FSMContext, db_service: DatabaseService):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤)."""
    user = await db_service.get_user_by_telegram_id(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    if user.get("referrer_id"):
        await message.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥–ª–∞–π–Ω 48 —á–∞—Å–æ–≤
    if user.get("refcode_deadline") and datetime.now() > user["refcode_deadline"]:
        await message.answer("‚ùå –í—Ä–µ–º—è –¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ (48 —á–∞—Å–æ–≤).")
        return
    
    await state.set_state(RegistrationStates.waiting_for_referral_code)
    await message.answer(
        "üéÅ –í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 100 –±–∞–ª–ª–æ–≤:\n\n"
        "‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è 48 —á–∞—Å–æ–≤ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
    )
